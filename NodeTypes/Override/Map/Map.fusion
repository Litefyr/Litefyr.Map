prototype(Jonnitto.Maps:Content.Map) {
    breakout = ${q(node).property('breakout')}
    enableText = ${q(node).property('enableText')}
    float = ${q(node).property('float')}
    textMobileBottom = ${q(node).property('textMobileBottom')}
    enableHeadline = ${q(node).property('enableHeadline')}
    headlineFontSize = ${q(node).property('headlineFontSize')}
    theme = ${q(node).property('theme')}
    leftColSize = ${q(node).property('leftColSize')}
    textLeft = ${q(node).property('textLeft')}
    align = ${q(node).property('align')}
    links = Litefyr.Integration:Component.Links

    headline = Neos.Neos:Editable {
        property = 'headline'
        block = false
    }

    label = Neos.Neos:Editable {
        property = 'label'
        block = false
    }

    text = Neos.Neos:Editable {
        property = 'text'
    }

    animationMedia = Litefyr.Animations:Helper.Media
    animationText = Litefyr.Animations:Helper.Text

    attributes = Neos.Fusion:DataStructure {
        @if.set = ${!q(node).property('enableText')}
        data-animation-media = Litefyr.Animations:Helper.Media
    }
    additionalClass = Neos.Fusion:Component {
        @if.set = ${!q(node).property('enableText')}
        breakout = ${q(node).property('breakout')}
        enableClipPath = ${this.breakout == 'full' ? Carbon.Array.check(q(node).property('enableClipPath')) : false}
        renderer = Litefyr.Presentation:Spacing {
            onlyClass = true
            width = ${props.breakout}
            class = ${[Presentation.cssClass('map'), props.enableClipPath ?  Presentation.clippathClass('content', 'map') : null]}
            tailwind = Neos.Fusion:Match {
                @subject = ${props.breakout}
                @default = 'rounded-box overflow-clip shadow'
                wide = 'wide:rounded-box wide:overflow-clip shadow'
                full = 'shadow'
            }
        }
    }

    renderer.@process.textWithContent = Litefyr.Presentation:Module.TextWithContent {
        @if.set = ${props.enableText}
        @apply.props = ${props}
        breakpoint = 'lg'
        singleContent = ${value}
        wrapperClass = ${Presentation.cssClass("map")}
        contentClass = Neos.Fusion:Match {
            @subject = ${props.breakout || ''}
            @default = 'rounded-box overflow-clip shadow'
            wide = 'wide:rounded-box wide:overflow-clip shadow'
            full = 'shadow'
        }
    }
}
